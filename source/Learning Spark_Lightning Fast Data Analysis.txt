\uFEFFspark\u5FEB\u901F\u5927\u6570\u636E\u5206\u6790

\u5B89\u88C5\u5728C:\spark\u76EE\u5F55
\u8FD0\u884Cpyspark: C:\spark\spark-1.6.0-bin-hadoop2.6\bin>pyspark

\u7B2C\u4E00\u4E2A\u7528\u4F8B
>>> lines = sc.textFile("C:\\spark\\spark-1.6.0-bin-hadoop2.6\\README.md")		#\u5982\u679C\u6587\u4EF6\u4E0D\u5728C:\spark\spark-1.6.0-bin-hadoop2.6\bin\u4E0B\u9762\uFF0C\u90A3\u5C31\u7528\u7EDD\u5BF9\u8DEF\u5F84\u5427
>>> lines.count()
95
>>> lines.first()
u'# Apache Spark'
>>> pythonLines = lines.filter(lambda line: "Python" in line)			#\u7B5B\u9009\u5E26"Python"\u7684\u884C
>>> pythonLines
PythonRDD[11] at RDD at PythonRDD.scala:43
>>> pythonLines.first()
u'high-level APIs in Scala, Java, Python, and R, and an optimized engine that'


\u77E5\u8BC6\u70B9\uFF1B
\u8FDB\u5165pyspark\u73AF\u5883\uFF0C\u8FD9\u4E2A\u73AF\u5883\u5DF2\u7ECF\u81EA\u52A8\u7684\u5E2E\u4F60\u521B\u5EFA\u4E86\u4E00\u4E2A\u201CSparkContext\u5BF9\u8C61\u201D\uFF1Asc
>>> sc
<pyspark.context.SparkContext object at 0x025BF2F0>

sc\u53EF\u4EE5\u521B\u5EFARDD\uFF08\u5F39\u6027\u5206\u5E03\u5F0F\u6570\u636E\u96C6\uFF09\uFF0CRDD\u7684\u6570\u636E\u53EF\u4EE5\u6765\u6E90\u4E8E\u6587\u4EF6\uFF0C\u4E5F\u53EF\u4EE5\u6765\u6E90\u4E8Epython\u5BF9\u8C61\uFF08list\uFF0Cset\u7B49\uFF09

\u5982\u679C\u8981\u7F16\u5199\u72EC\u7ACB\u8FD0\u884C\u7684python\u811A\u672C\uFF0C\u90A3\u4E48sc\u7684\u521B\u5EFA\u8981\u81EA\u5DF1\u505A\uFF1A
==
from pyspark import SparkConf, SparkContext

conf = SparkConf().setMaster("local").setAppName("My App")
sc = SparkContext(conf = conf)
#
#...
sc.stop()

#

==
\u8FD0\u884C\u7684\u65F6\u5019\u8981\u4F7F\u7528\u4E0B\u9762\u7684\u65B9\u5F0F\u8FD0\u884C\u72EC\u7ACB\u811A\u672C
bin/spark-submit my_script.py


\u4EE5\u4E0A\u662F\u5FEB\u901F\u5165\u95E8\uFF0C\u8BE6\u7EC6\u7684\u5165\u95E8\u5728http://spark.apache.org/docs/latest/quick-start.html


RDD----1.\u521BRDD\u5EFA\uFF0C2.\u8F6C\u5316\u5DF2\u6709RDD\uFF0C3.\u8C03\u7528RDD\u64CD\u4F5C

sc.textFile\u7B49\u65B9\u5F0F\u521B\u5EFARDD\u540E\uFF0C\u6BCF\u6B21\u64CD\u4F5C\u4F1A\u91CD\u65B0\u8BA1\u7B97\uFF0C\u8FD9\u5C31\u4F1A\u6BCF\u6B21\u8BFB\u53D6\u6570\u636E\u5230\u5185\u5B58\u3002\u5982\u679C\u8981\u5728\u591A\u4E2A\u884C\u52A8\u64CD\u4F5C\u4E2D\u91CD\u7528\u540C\u4E00\u4E2A RDD\uFF0C\u53EF\u4EE5\u4F7F\u7528RDD.persist() \u8BA9 Spark \u628A\u8FD9\u4E2A RDD \u7F13\u5B58\u4E0B\u6765\u3002
>>> pythonLines.persist()
PythonRDD[11] at RDD at PythonRDD.scala:43
>>> pythonLines.first()
u'high-level APIs in Scala, Java, Python, and R, and an optimized engine that'
>>> pythonLines.count()
3

\u521B\u5EFARDD
lines = sc.parallelize(["pandas", "i like pandas"])	\u6216
lines = sc.textFile("/path/to/README.md")


\u8F6C\u5316\u64CD\u4F5C


\u884C\u52A8\u64CD\u4F5C
>>> print "Input had " + str(lines.count()) + " concerning lines"
>>> for line in lines.take(10):
...     print line
...
>>>

RDD\u8FD8\u6709\u4E00\u4E2Acollect()\u51FD\u6570\uFF0C\u53EF\u4EE5\u7528\u6765\u83B7\u53D6\u6574\u4E2A RDD \u4E2D\u7684\u6570\u636E----\u4E0D\u8FC7\u4E00\u5B9A\u8981\u4FDD\u8BC1collect()\u7684RDD\u7684\u89C4\u6A21\u5C0F\u5230\u53EF\u4EE5\u653E\u8FDB\u6267\u884C\u52A8\u4F5C\u7684\u8BA1\u7B97\u673A


\u5411Spark\u4F20\u9012\u51FD\u6570
Spark \u7684\u5927\u90E8\u5206\u8F6C\u5316\u64CD\u4F5C\u548C\u4E00\u90E8\u5206\u884C\u52A8\u64CD\u4F5C\uFF0C\u90FD\u9700\u8981\u4F9D\u8D56\u7528\u6237\u4F20\u9012\u7684\u51FD\u6570\u6765\u8BA1\u7B97\u3002

\u7B80\u5355\u7684\u51FD\u6570\u53EF\u4EE5\u7528lambda
word = rdd.filter(lambda s: "error" in s)

map()	\u63A5\u6536\u4E00\u4E2A\u51FD\u6570\uFF0C\u628A\u8FD9\u4E2A\u51FD\u6570\u7528\u4E8E RDD \u4E2D\u7684\u6BCF\u4E2A\u5143\u7D20\uFF0C\u5C06\u51FD\u6570\u7684\u8FD4\u56DE\u7ED3\u679C\u4F5C\u4E3A\u7ED3\u679C RDD \u4E2D\u5BF9\u5E94\u5143\u7D20\u7684\u503C\u3002
filter()	\u63A5\u6536\u4E00\u4E2A\u51FD\u6570\uFF0C\u5E76\u5C06 RDD \u4E2D\u6EE1\u8DB3\u8BE5\u51FD\u6570\u7684\u5143\u7D20\u653E\u5165\u65B0\u7684RDD \u4E2D\u8FD4\u56DE\u3002

>>> nums = sc.parallelize([1, 2, 3, 4])
>>> squared = nums.map(lambda x: x * x).collect()
>>> for num in squared:
...     print "%i " % (num)
...
1
4
9
16
>>>
